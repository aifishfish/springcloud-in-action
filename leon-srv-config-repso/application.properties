#eureka服务注册中心
#开启健康检查（需要spring-boot-starter-actuator依赖）
eureka.client.healthcheck.enabled = true
#租期更新时间间隔（默认30秒）
eureka.instance.lease-renewal-interval-in-seconds=30
#租期到期时间（默认90秒）
eureka.instance.lease-expiration-duration-in-seconds=60
#注册时使用ip而不是主机名
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
#只使用站点本地地址
spring.cloud.inetutils.use-only-site-local-interfaces=true

spring.rabbitmq.host=192.168.150.31
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#全链路追踪服务
spring.zipkin.base-url=http://192.168.150.36:1111

#指定需要取样的请求百分比，默认值是0.1分布式系统中，数据量也许会应该大。
#所以，可以根据各自的项目情况，设置合适的采样非常重要。
#这里因为是开发阶段，把采样设置成了1.0，即100%。
spring.sleuth.sampler.percentage=0.1

##安全认证的配置
security.basic.enabled=true
security.user.name=leon2018
security.user.password=leon2018!

#如果SpringBootAdmin监控服务中心设置了用户名密码访问，需要在客户端配置  
spring.boot.admin.username=leon2018
spring.boot.admin.password=leon2018! 

# spring-boot 1.5.2之后严格执行安全策略，所以需要配置这个为false ,否则很多点监控不到
management.security.enabled=false
#开启所有的端点
endpoints.sensitive=false

#启用shutdown
endpoints.shutdown.enabled=true
#启用restart
endpoints.restart.enabled=true
#密码验证
endpoints.shutdown.sensitive=true


#修改默认的客户端调用超时时间
##请求连接的超时时间
ribbon.ConnectTimeout=60000
##请求处理的超时时间
ribbon.ReadTimeout=60000
#开启重试机制
spring.cloud.loadbalancer.retry.enabled=true
##对当前实例的重试次数
ribbon.MaxAutoRetries=0
##切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=1


#开启feign的hystrix断路器
feign.hystrix.enabled=true
#解决Feign/Ribbon/zuul第一次请求失败的问题
#断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=100000
#命令执行超时时间，默认1000ms
hystrix.default.execution.isolation.thread.timeoutInMilliseconds=100000
hystrix.default.execution.timeout.enabled=true
#并发执行的最大线程数，默认10
hystrix.threadpool.default.coreSize = 500
hystrix.threadpool.default.maxQueueSize = 500
hystrix.threadpool.default.queueSizeRejectionThreshold = 100 


#启用请求或响应GZIP压缩
feign.compression.request.enabled=true
feign.compression.response.enabled=true
#设置压缩介质类型和最小请求阈值长度
feign.compression.request.mime-types=text/xml,application/xml,application/json  
feign.compression.request.min-request-size=2048 

#开启okhttp传输
feign.okhttp.enabled=true

#日志  
logging.config = classpath:logback-spring.xml
## 设置日志记录版本
spring.profiles.active=dev
## 设置日志记录级别
debug = true

#tomcat
server.max-http-header-size=10000000 
server.connection-timeout=5000
##设定tomcat的最大工作线程数，默认为: 0
server.tomcat.max-threads=1000
server.tomcat.min-spare-threads=20
server.tomcat.max-http-post-size = 102400000
# tomcat的URI编码 
server.tomcat.uri-encoding=UTF-8
##设定http header的最小值，默认: 0
server.tomcat.max-http-header-size = 102400000

#undertow
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

##设定URI的解码字符集
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true




